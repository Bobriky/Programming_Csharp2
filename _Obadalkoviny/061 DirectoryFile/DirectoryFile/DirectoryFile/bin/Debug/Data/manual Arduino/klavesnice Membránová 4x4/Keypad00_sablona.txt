// Membránová klávesnice 4x4
//Knihovny
  #include <Keypad.h>

// Globální proměnné a konstanty
  const byte radky = 4;
  const byte sloupce = 4;
  char keys[radky][sloupce] = {{'1','2','3','A'},{'4','5','6','B'},{'7','8','9','C'},{'*','0','#','D'}};
  byte pinyRadku[radky] = {12, 11, 10, 9};
  byte pinySloupcu[sloupce] = {8, 7, 6, 5};

  Keypad klavesnice = Keypad( makeKeymap(keys), pinyRadku, pinySloupcu, radky, sloupce);  
  // Konstruktor - vytvoření instance klavesnice z knihovny Keypad
  // Keypad(char *userKeymap, byte *row, byte *col, byte numRows, byte numCols);

  
void setup() 
{
  char znak = klavesnice.getKey();
  byte cislo = klavesnice.numKeys();
  
}
void loop() 
{
  
  
}

/* Knihovna manual
  Keypad(char *userKeymap, byte *row, byte *col, byte numRows, byte numCols);

  virtual void pin_mode(byte pinNum, byte mode) { pinMode(pinNum, mode); }
  virtual void pin_write(byte pinNum, boolean level) { digitalWrite(pinNum, level); }
  virtual int  pin_read(byte pinNum) { return digitalRead(pinNum); }

  uint bitMap[MAPSIZE]; // 10 row x 16 column array of bits. Except Due which has 32 columns.
  Key key[LIST_MAX];
  unsigned long holdTimer;

  char getKey();
  bool getKeys();
  KeyState getState();
  void begin(char *userKeymap);
  bool isPressed(char keyChar);
  void setDebounceTime(uint);
  void setHoldTime(uint);
  void addEventListener(void (*listener)(char));
  int findInList(char keyChar);
  int findInList(int keyCode);
  char waitForKey();
  bool keyStateChanged();
  byte numKeys();
*/
