// LED matice s MAX7219
#include "LedControl.h"
#define DIN 10      // Data IN
#define CS  11      // Chip Select
#define CLK 12      // Clock
#define Mat0 0      // definuje pořadí matice (počítáné do 0)
#define Mat1 1 

// Globální proměné
LedControl ledMat = LedControl(DIN, CLK, CS, Mat0);    // objekt (instance) třídy LedControl (konstruktror s parametry)

byte cislice[][8] =
{                                                //index = symbol
  {0x00, 0x38, 0x44, 0x4c, 0x54, 0x64, 0x44, 0x38}, // 0
  {0x04, 0x0c, 0x14, 0x24, 0x04, 0x04, 0x04, 0x04}, // 1
  {0x00, 0x30, 0x48, 0x04, 0x04, 0x38, 0x40, 0x7c}, // 2
  {0x00, 0x38, 0x04, 0x04, 0x18, 0x04, 0x44, 0x38}, // 3
  {0x00, 0x04, 0x0c, 0x14, 0x24, 0x7e, 0x04, 0x04}, // 4
  {0x00, 0x7c, 0x40, 0x40, 0x78, 0x04, 0x04, 0x38}, // 5
  {0x00, 0x38, 0x40, 0x40, 0x78, 0x44, 0x44, 0x38}, // 6
  {0x00, 0x7c, 0x04, 0x04, 0x08, 0x08, 0x10, 0x10}, // 7
  {0x00, 0x3c, 0x44, 0x44, 0x38, 0x44, 0x44, 0x78}, // 8
  {0x00, 0x38, 0x44, 0x44, 0x3c, 0x04, 0x04, 0x78}, // 9
};

byte pismVelka[][8] =
{                                                 //index - symbol
  {0x00, 0x1c, 0x22, 0x42, 0x42, 0x7e, 0x42, 0x42}, // 0 - A
  {0x00, 0x78, 0x44, 0x44, 0x78, 0x44, 0x44, 0x7c}, // 1 - B
  {0x00, 0x3c, 0x44, 0x40, 0x40, 0x40, 0x44, 0x7c}, // 2 - C
  {0x00, 0x7c, 0x42, 0x42, 0x42, 0x42, 0x44, 0x78}, // 3 - D
  {0x00, 0x78, 0x40, 0x40, 0x70, 0x40, 0x40, 0x7c}, // 15 - E
  {0x00, 0x7c, 0x40, 0x40, 0x78, 0x40, 0x40, 0x40}, // 16 - F
  {0x00, 0x3c, 0x40, 0x40, 0x5c, 0x44, 0x44, 0x78}, // 17 - G
  {0x00, 0x42, 0x42, 0x42, 0x7e, 0x42, 0x42, 0x42}, // 18 - H
  {0x00, 0x7c, 0x10, 0x10, 0x10, 0x10, 0x10, 0x7e}, // 19 - I
  {0x00, 0x7e, 0x02, 0x02, 0x02, 0x02, 0x04, 0x38}, // 20 - J
  {0x00, 0x44, 0x48, 0x50, 0x60, 0x50, 0x48, 0x44}, // 21 - K
  {0x00, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x7c}, // 22 - L
  {0x00, 0x82, 0xc6, 0xaa, 0x92, 0x82, 0x82, 0x82}, // 23 - M
  {0x00, 0x42, 0x42, 0x62, 0x52, 0x4a, 0x46, 0x42}, // 24 - N
  {0x00, 0x3c, 0x42, 0x42, 0x42, 0x42, 0x44, 0x38}, // 25 - O
  {0x00, 0x78, 0x44, 0x44, 0x48, 0x70, 0x40, 0x40}, // 26 - P
  {0x00, 0x3c, 0x42, 0x42, 0x52, 0x4a, 0x44, 0x3a}, // 27 - Q
  {0x00, 0x78, 0x44, 0x44, 0x78, 0x50, 0x48, 0x44}, // 28 - R
  {0x00, 0x38, 0x40, 0x40, 0x38, 0x04, 0x04, 0x78}, // 29 - S
  {0x00, 0x7e, 0x90, 0x10, 0x10, 0x10, 0x10, 0x10}, // 30 - T
  {0x00, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3e}, // 31 - U
  {0x00, 0x42, 0x42, 0x42, 0x42, 0x44, 0x28, 0x10}, // 32 - V
  {0x80, 0x82, 0x82, 0x92, 0x92, 0x92, 0x94, 0x78}, // 33 - W
  {0x00, 0x42, 0x42, 0x24, 0x18, 0x24, 0x42, 0x42}, // 34 - X
  {0x00, 0x44, 0x44, 0x28, 0x10, 0x10, 0x10, 0x10}, // 35 - Y
  {0x00, 0x7c, 0x04, 0x08, 0x7c, 0x20, 0x40, 0xfe}, // 36 - Z
};

byte znaky[][8] =
{                                                 //index - symbol
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 0 - SPACE
  {0x00, 0x0a, 0x7f, 0x14, 0x28, 0xfe, 0x50, 0x00}, // 1 - #
  {0x10, 0x38, 0x54, 0x70, 0x1c, 0x54, 0x38, 0x10}, // 2 - $
  {0x00, 0x60, 0x66, 0x08, 0x10, 0x66, 0x06, 0x00}, // 3 - %
  {0x00, 0x10, 0x18, 0x18, 0x08, 0x00, 0x00, 0x00}, // 4 - '
  {0x02, 0x04, 0x08, 0x08, 0x08, 0x08, 0x08, 0x04}, // 5 - (
  {0x40, 0x20, 0x10, 0x10, 0x10, 0x10, 0x10, 0x20}, // 6 - )
  {0x00, 0x10, 0x54, 0x38, 0x10, 0x38, 0x54, 0x10}, // 7 - *
  {0x00, 0x08, 0x08, 0x08, 0x7f, 0x08, 0x08, 0x08}, // 8 - +
  {0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00}, // 9 - -
  {0x00, 0x04, 0x04, 0x08, 0x10, 0x20, 0x40, 0x40}, // 10 - /
  {0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x00}, // 11 - :
  {0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x08}, // 12 - ;
  {0x00, 0x10, 0x20, 0x40, 0x80, 0x40, 0x20, 0x10}, // 13 - <
  {0x00, 0x00, 0x7e, 0x00, 0x00, 0xfc, 0x00, 0x00}, // 14 - =
  {0x00, 0x08, 0x04, 0x02, 0x01, 0x02, 0x04, 0x08}, // 15 - >
  {0x00, 0x38, 0x44, 0x04, 0x08, 0x10, 0x00, 0x10}, // 16 - ?
  {0x00, 0x30, 0x48, 0xba, 0xba, 0x84, 0x78, 0x00}, // 17 - @
};

byte symbol[][8] =
{                                          //index - symbol 
  {0X08,0X0C,0X06,0XFF,0XFF,0X06,0X0C,0X08}, //0 - vpravo
  {0X10,0X30,0X60,0XFF,0XFF,0X60,0X30,0X10}, //1 - vlevo
  {0X18,0X3C,0X7E,0XDB,0X18,0X18,0X18,0X18}, //2 - nahoru 
  {0X18,0X18,0X18,0X18,0XDB,0X7E,0X3C,0X18}, //3 - dolu
  {0X10,0X38,0X10,0X7C,0X10,0X10,0X28,0X44}, //4 - panak
  {0X81,0X42,0X24,0X18,0X18,0X24,0X42,0X81}, //5 - krizek
  {0X3C,0X42,0X81,0X81,0X81,0X81,0X42,0X3C}, //6 - kolecko
  {0XFF,0XC3,0XA5,0X99,0X99,0XA5,0XC3,0XFF}, //7 - krizek ram
};

byte smajlik[][8] =
{ 
  {0X3C,0X42,0X81,0XA5,0X81,0XBD,0X42,0X3C},  //0 
  {0X3C,0X42,0X81,0X81,0X81,0X81,0X42,0X3C},  //1 
};

void setup() 
{
  ledMat.shutdown(Mat0, false);        // inicializace matice pro zahájení komunikace
  ledMat.setIntensity(Mat0, 7);        // nastavení svítivosti LED (0-15)
  ledMat.clearDisplay(Mat0);           // zhasnutí všech LED diod na matici
  //ledMat.setRow(Mat0, cisloRadku, znak[]);      // 0 -7
  //ledMat.setColumn(Mat0, cisloSloupce, znak[]); // 0 -7
  //ledMat.setLed(Mat0, radek, sloupec, true);  // ON
  //ledMat.setLed(Mat0, radek, sloupec, true);  // OFF
  
}
void loop() 
{


}

/* Knihovna manual 
  class LedControl
  Datatypes (KEYWORD1)
  LedControl KEYWORD1
  Constants (LITERAL1) 
  
  Methods and Functions 
    LedControl(int dataPin, int clkPin, int csPin, int numDevices=1);
     * Create a new controler 
     * dataPin    pin on the Arduino where data gets shifted out
     * clockPin   pin for the clock
     * csPin      pin for selecting the device 
     * numDevices maximum number of devices that can be controled
 
    int getDeviceCount();
     * Gets the number of devices attached to this LedControl.
     * Returns :
     * int  the number of devices on this LedControl
 
    void shutdown(int addr, bool status);
     * Set the shutdown (power saving) mode for the device
     * Params :
     * addr The address of the display to control
     * status If true the device goes into power-down mode. Set to false
     *    for normal operation.

   void setScanLimit(int addr, int limit);
     * Set the number of digits (or rows) to be displayed.
     * See datasheet for sideeffects of the scanlimit on the brightness
     * of the display.
     * Params :
     * addr address of the display to control
     * limit  number of digits to be displayed (1..8)

   void setIntensity(int addr, int intensity);   
     * Set the brightness of the display.
     * Params:
     * addr   the address of the display to control
     * intensity  the brightness of the display. (0..15)
    
    void clearDisplay(int addr);
     * Switch all Leds on the display off. 
     * Params:
     * addr address of the display to control

    void setLed(int addr, int row, int col, boolean state); 
     * Set the status of a single Led.
     * Params :
     * addr address of the display 
     * row  the row of the Led (0..7)
     * col  the column of the Led (0..7)
     * state  If true the led is switched on, 
     *    if false it is switched off

    void setRow(int addr, int row, byte value);
     * Set all 8 Led's in a row to a new state
     * Params:
     * addr address of the display
     * row  row which is to be set (0..7)
     * value  each bit set to 1 will light up the
     *    corresponding Led.

    void setColumn(int addr, int col, byte value);
     * Set all 8 Led's in a column to a new state
     * Params:
     * addr address of the display
     * col  column which is to be set (0..7)
     * value  each bit set to 1 will light up the
     *    corresponding Led.

    void setDigit(int addr, int digit, byte value, boolean dp);
     * Display a hexadecimal digit on a 7-Segment Display
     * Params:
     * addr address of the display
     * digit  the position of the digit on the display (0..7)
     * value  the value to be displayed. (0x00..0x0F)
     * dp sets the decimal point.

  void setChar(int addr, int digit, char value, boolean dp); 
     * Display a character on a 7-Segment display.
     * There are only a few characters that make sense here :
     *  '0','1','2','3','4','5','6','7','8','9','0',
     *  'A','b','c','d','E','F','H','L','P',
     *  '.','-','_',' ' 
     * Params:
     * addr address of the display
     * digit  the position of the character on the display (0..7)
     * value  the character to be displayed. 
     * dp sets the decimal point. 
 
 
 */
